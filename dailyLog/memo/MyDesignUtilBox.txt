# 객체지향 기초
* 추상화
* 캡슐화
* 다향성
* 상속

# 객체지향 원칙
* 바뀌는 부분은 캐슐화한다.
* 상속보다는 구성을 활용한다.
* 구현보다는 인터페이스에 맞춰서 프로그래밍한다.
* 상호작용하는 객체 사이에서는 가능하면 느승한 결합을 사용해야 한다.
* 클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀 있어야 한다(OCP).
* 추상화된 것에 의존하게 만들고 구상 클래스에 의존하지 않게 만든다.
* 진짜 절친에게만 이야기해야 한다.

# 객체지향 패턴
## 전략패턴
- 전략 패턴은 알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정해서 쓸 수 있게 해준다. 전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있다.

## 옵저버 패턴
- 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to_many) 의존성을 정의한다.

## 추상 팩토리 패턴
- 구상 클래스에 의존하지 않고도 서로 연관되거나 의존적인 객체로 이루어진 제품군을 생성하는 인터페이스를 제공한다. 구상 클래스는 서브클래스에서 만든다.

## 팩토리 메소드 패턴
- 객체를 생성할 때 필요한 인터페이스를 만든다. 어떤 클래스의 인스턴스를 만들지는 서브클래스에서 결정한다. 팩토리 메소드를 사용하면 인스턴스 만드는 일을 서브클래스에 맡길 수 있다.

## 싱글턴 패턴
- 클래스 인스턴스를 하나만 만들고, 그 인스턴스의 전역 접근을 제공한다.

## 커맨드 패턴
- 요청 내역을 객체로 캡슐화해서 객체를 서로 다른 요청 내역에 따라 매개변수화할 수 있다. 이러면 요청을 큐에 저장하거나 로그로 기록하거나 작업 취소 기능을 사용할 수 있다.

##어댑터 패턴
- 특정 클래스 인터페이스를 클라이언트에서 요구하는 다른 인터페이스로 반환한다. 인터페이스가 호환되지 않아 같이 쓸 수 없었던 클래스를 사용할 수 있게 도와준다.

##퍼사드 패턴
- 서브시스템에 있는 일련의 인터페이슬 ㄹ통합 인터페이스로 묶어 준다. 또한 고수준 인터페이스도 정의하므로 서비시스템을 더 편리하게 사용할 수 있다.