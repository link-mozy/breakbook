# 객체지향 기초
* 추상화
* 캡슐화
* 다향성
* 상속

# 객체지향 원칙
* 바뀌는 부분은 캐슐화한다.
* 상속보다는 구성을 활용한다.
* 구현보다는 인터페이스에 맞춰서 프로그래밍한다.
* 상호작용하는 객체 사이에서는 가능하면 느승한 결합을 사용해야 한다.

# 객체지향 패턴
## 전략패턴
- 전략 패턴은 알고리즘군을 정의하고 캡슐화해서 각각의 알고리즘군을 수정해서 쓸 수 있게 해준다. 전략 패턴을 사용하면 클라이언트로부터 알고리즘을 분리해서 독립적으로 변경할 수 있다.

## 옵저버 패턴
- 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체에 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다(one-to_many) 의존성을 정의한다.